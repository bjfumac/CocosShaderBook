// Effect Syntax Guide: https://docs.cocos.com/creator/manual/zh/shader/index.html

CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: vs:vert
      frag: fs:frag
      properties: &props
        _Diffuse:      { value: [1, 1, 1, 1], editor: { type: color } }
    

}%

CCProgram vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #include <builtin/uniforms/cc-local>
  in vec3 a_position;
  in vec3 a_normal;

  out vec4 v_pos;
  out vec3 v_worldNormal;

  vec4 vert () {
    vec4 vertex = vec4(a_position, 1.0);
    vec3 normal = a_normal;
    v_pos = cc_matProj * (cc_matView * cc_matWorld) * vertex;
    v_worldNormal =  mat3(cc_matWorldIT) * normal;
    return v_pos;
  }
}%


CCProgram fs %{
  precision highp float;
  #include <legacy/output>
  #include <builtin/uniforms/cc-global>

  in vec4 v_pos;
  in vec3 v_worldNormal;

  #define saturate(a) clamp(a, 0.0, 1.0)

  uniform Constant {
    vec4 _Diffuse;
  };

  vec4 frag () {
    //获取环境光
    vec3 ambient = cc_ambientSky.xyz;
    //法线变换到世界空间
    vec3 worldNormal = normalize(v_worldNormal);
    //获取世界空间下的平行光方向
    vec3 worldLightDir = normalize(-cc_mainLitDir.xyz);
    //计算半兰伯特模型
    float halfLambert = dot(worldNormal, worldLightDir) * 0.5 + 0.5;
    //计算漫反射
    vec3 diffuse = cc_mainLitColor.rgb * _Diffuse.rgb * halfLambert;
    vec3 color = ambient + diffuse;
    return CCFragOutput(vec4(color, 1.0));
  }
}%

// Effect Syntax Guide: https://docs.cocos.com/creator/manual/zh/shader/index.html

CCEffect %{
  techniques:
  - name: transparent
    passes:
    - vert: vs:vert
      frag: fs:frag
      depthStencilState: #ZWrite Off
        depthFunc: less
        depthTest: true
        depthWrite: false
      blendState: #Blend SrcAlpha OneMinusSrcAlpha, One Zero
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendAlphaSrc: one
          blendAlphaDst: zero
      properties: &props
        _Color:      { value: [1, 1, 1, 1], editor: { type: color } }
        _MainTex:    { value: white }
        _MainTex_ST:   { value: [1, 1, 0, 0] }
        _AlphaScale:    { value: 1.0, editor: { slide: true, range: [0.0, 1.0], step: 0.1, type: float } }
}%

CCProgram vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #include <builtin/uniforms/cc-local>
  #include <../cc-cg>
  in vec3 a_position;
  in vec2 a_texCoord;

  out vec4 v_pos;
  out vec2 v_uv;

  uniform ConstantV {
    vec4 _MainTex_ST;
  };

  vec4 vert () {
    //顶点坐标变换到投影空间
    vec4 vertex = vec4(a_position, 1.0);
    v_pos = CCObjectToClipPos(vertex);

    //uv坐标处理
    v_uv = TRANSFORM_TEX(a_texCoord, _MainTex_ST);
    return v_pos;
  }
}%


CCProgram fs %{
  precision highp float;
  #include <legacy/output>
  #include <builtin/uniforms/cc-global>
  #include <../cc-cg>

  in vec4 v_pos;
  in vec2 v_uv;

  uniform ConstantF {
    vec4 _Color;
    float _AlphaScale;
  };
  uniform sampler2D _MainTex;

  vec4 frag () {
    //从贴图获取反照率
    vec4 texColor = texture(_MainTex, v_uv);
    
    return CCFragOutput(vec4(texColor.rgb * _Color.rgb, texColor.a * _AlphaScale));
  }
}%

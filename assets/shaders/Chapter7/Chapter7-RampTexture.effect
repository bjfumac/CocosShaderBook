// Effect Syntax Guide: https://docs.cocos.com/creator/manual/zh/shader/index.html

CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: vs:vert
      frag: fs:frag
      properties: &props
        _Color:      { value: [1, 1, 1, 1], editor: { type: color } }
        _RampTex:    { value: white }
        _RampTex_ST:   { value: [1, 1, 0, 0] }
        _Specular:      { value: [1, 1, 1, 1], editor: { type: color } }
        _Gloss:            { value: 20.0, editor: { slide: true, range: [8.0, 255.0], step: 1, type: float } }
}%


CCProgram vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #include <builtin/uniforms/cc-local>
  #include <../cc-cg>
  in vec3 a_position;
  in vec3 a_normal;
  in vec2 a_texCoord;

  out vec4 v_pos;
  out vec3 v_worldNormal;
  out vec3 v_worldPos;
  out vec2 v_uv;

  uniform ConstantV {
    vec4 _RampTex_ST;
  };

  

  vec4 vert () {
    //顶点坐标变换到投影空间
    vec4 vertex = vec4(a_position, 1.0);
    v_pos = CCObjectToClipPos(vertex);

    //法线变换到世界空间
    v_worldNormal =  CCObjectToWorldNormal(a_normal);

    //顶点变换到世界坐标
    v_worldPos = (cc_matWorld * vertex).xyz;
   
    //uv坐标处理
    v_uv.xy = TRANSFORM_TEX(a_texCoord, _RampTex_ST);

    return v_pos;
  }
}%


CCProgram fs %{
  precision highp float;
  #include <legacy/output>
  #include <builtin/uniforms/cc-global>
  #include <../cc-cg>

  in vec4 v_pos;
  in vec3 v_worldNormal;
  in vec3 v_worldPos;
  in vec2 v_uv;

  uniform ConstantF {
    vec4 _Color;
    vec4 _Specular;
    float _Gloss;
  };

  uniform sampler2D _RampTex;

  


  vec4 frag () {
    vec3 worldNormal = normalize(v_worldNormal);
    vec4 worldLightPos = vec4(-cc_mainLitDir.x, -cc_mainLitDir.y, -cc_mainLitDir.z, cc_mainLitDir.w);
		vec3 worldLightDir = normalize(CCWorldSpaceLightDir(worldLightPos, v_worldPos));
    //获取环境光
    vec3 ambient = cc_ambientSky.xyz;
    //从贴图获取漫反射
    float halfLambert  = 0.5 * dot(worldNormal, worldLightDir) + 0.5;
    vec3 diffuseColor = texture(_RampTex, vec2(halfLambert, halfLambert)).rgb * _Color.rgb;
    vec3 diffuse = cc_mainLitColor.rgb * diffuseColor;
    //计算视线方向
    vec3 viewDir = normalize(CCWorldSpaceViewDir(v_worldPos));
    //计算高光
    vec3 halfDir = normalize(worldLightDir + viewDir);
    vec3 specular = cc_mainLitColor.rgb * _Specular.rgb * pow(saturate(dot(worldNormal, halfDir)), _Gloss);
    return CCFragOutput(vec4(ambient + diffuse + specular, 1.0));
  }
}%
